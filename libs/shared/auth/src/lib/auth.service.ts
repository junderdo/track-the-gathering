import { Injectable, UnauthorizedException } from '@nestjs/common';
import { Request } from 'express';
import { createRemoteJWKSet, decodeJwt, jwtVerify } from 'jose';
import { AppRole } from './roles.decorator';
import { Auth0User } from './auth0-user.interface';

@Injectable()
export class AuthService {
  // valid values for "propName" are any properties in JWT payload generated by Auth0 (via Auth0 Rules / Actions)
  public static getPropFromJwt(
    propName: string,
    token: string
  ): Auth0User | AppRole[] {
    const auth0Namespace = process.env['AUTH0_NAMESPACE_BASE'];
    const payload = decodeJwt(token);

    if (propName === 'user') {
      return payload[`${auth0Namespace}/user`] as Auth0User;
    }
    if (propName === 'roles') {
      return payload[`${auth0Namespace}/roles`] as AppRole[];
    }
    throw new Error('Invalid token property.');
  }

  public static getTokenFromRequest(request: Request) {
    console.log('TOKEN: ', request.headers.authorization);
    const token = request.headers.authorization?.split('Bearer ')[1];
    if (!token?.length) throw new UnauthorizedException();
    return token;
  }

  public static async verifyJWT(token: string): Promise<void> {
    try {
      console.log('Validating token: ', token);

      const issuerUrl = `https://${process.env['AUTH0_DOMAIN']}/`;
      const remoteJWKSUrl = `${issuerUrl}.well-known/jwks.json`;
      console.log('REMOTE JWKS URL: ', new URL(remoteJWKSUrl).toJSON());

      // verify JWT with remotely-hosted JWKS:
      //    https://github.com/panva/jose/blob/main/docs/functions/jwt_verify.jwtVerify.md
      const JWKS = createRemoteJWKSet(new URL(remoteJWKSUrl));
      await jwtVerify(token, JWKS, {
        issuer: issuerUrl,
        audience: process.env['AUTH0_API_AUDIENCE'],
      });
    } catch (err) {
      console.error('Error validating token: ', err);
      throw new UnauthorizedException();
    }
  }

  //TODO validate roles && throw 403 if needed
  public static verifyRoles(roles: AppRole[], token: string) {
    console.log('VERIFYING ROLES: ', roles);
    console.log('VERIFYING TOKEN: ', token);
    if (!roles) return true;

    const tokenRoles = this.getTokenRoles(token);
    console.log(`token roles: ${tokenRoles}`);

    console.log(
      `Validating user roles from token: ${token} against required roles for route: ${JSON.stringify(
        roles
      )}`
    );
    return true;
  }

  public static getTokenRoles(token: string): AppRole[] {
    return this.getPropFromJwt('roles', token) as AppRole[];
  }
}
